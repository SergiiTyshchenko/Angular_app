timestamps {
	node('master') {
	wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
		
		println "====================================Pipeline STARTED=============================================="				
		def jobName = JOB_NAME.split('/')
		println  """ 
		Business Unit:
		Environment Profile: 
		"""
		def projectVarDir = "jenkins/vars"
		def projectClassDir = "jenkins/src/com/sergii"
		def WORKSPACE = pwd()					
		def Step_name
				
			
		Step_name = "Checkout from VCS"
        stage "${Step_name}"						
			def gitCredentials = "SergiiTyshchenko"
			def gitProjectURL = "https://github.com/SergiiTyshchenko/Angular_app.git"			
			try {
				git branch: 'master', credentialsId: "${gitCredentials}", url: "${gitProjectURL}"							
				step = load "${projectClassDir}/checkoutFromSCM.groovy"
				step.checkoutFromRepository(gitCredentials, gitProjectURL);
			} catch (e) {
			    currentBuild.result = "FAILED"
				notifyFailed()
				throw e	
			} finally {
				println "Current Build result: " + currentBuild.result
			}
		
				
		Step_name = "Build and Compile"						
        stage "${Step_name}"				
			step = load "${projectClassDir}/buildandCompile.groovy"
			def MAVEN_COMMAND = "mvn clean install"
			try {
					step.environmentDetails();
					//step.configureForCI(MAVEN_COMMAND);
					sh "cd ${APP_HOME}"
					//sh MAVEN_COMMAND
			} catch (e) {
			    currentBuild.result = "FAILED"
				notifyFailed()
				throw e	
			} finally {
				println "Current Build result: " + currentBuild.result
			}
		
		Step_name = "Unit Tests"	
		stage "${Step_name}"					
			try {	          
				//sh 'mvn tests'
			} catch (e) {
			    currentBuild.result = "FAILED"
				notifyFailed()
				throw e	
			} finally {
				println "Current Build result: " + currentBuild.result
			}
		
		Step_name = "Start"								
        stage "${Step_name}"
			def Log_parser = "jenkins/scripts/console_parsing_rules"	
		    def buildEnv = load "${projectVarDir}/systemEnvironment.groovy"	
			try {
				withEnv(buildEnv.defaultEnvironment()) {
						println "***************Start Job Run*****************"	
						//sh "${APP_HOME}/startup.sh"
				}
			} catch (e) {
			    currentBuild.result = "FAILED"
				notifyFailed()
				throw e	
			}	finally {
					step([$class: 'LogParserPublisher', parsingRulesPath: "${Log_parser}", useProjectRule: false, failBuildOnError: false, unstableOnWarning: false])
					println "Current Build result: " + currentBuild.result	
			}

		def buildStatus
		if (currentBuild.result == "FAILURE"){
			buildStatus = "danger" //warning or any else # color
		}
		else {
			currentBuild.result = "SUCCESS"
			buildStatus = "good"
		}
								
		println "Pipeline FINISHED"
			
	}
    }
	}


def notifyFailed() {
	  emailext (
      subject: "JENKINS JOB FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """<p>JENKINS: FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
      recipientProviders: [[$class: 'UpstreamComitterRecipientProvider']],
	  to: 'sergantty@gmail.com, kronverk@hotmail.com',
    )
}